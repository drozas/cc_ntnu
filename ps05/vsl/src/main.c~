#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <getopt.h>
#include "tree.h"
#include "symtab.h"
#include "scope.h"

int yyparse ( void );
node_t *root;


void
read_args ( int argc, char **argv )
{
    int option;
    while (  (option = getopt ( argc, argv, "f:" )) != -1 )
        switch ( option )
        {
            case 'f':
                if ( freopen ( optarg, "r", stdin ) == 0 )
                {
                    fprintf ( stderr, "Could not open file '%s'\n", optarg );
                    exit ( EXIT_FAILURE );
                }
                break;
        }
}


int
main ( int argc, char **argv )
{

    read_args ( argc, argv );
    yyparse ();

#ifdef DUMPTREES
    FILE *pre = fopen ( "pre.tree", "w" ),
        *post = fopen ( "post.tree", "w" );
    print_node ( pre, root, 0 );
#endif

    root = simplify_tree ( root );

#ifdef DUMPTREES
    print_node ( post, root, 0 );
    fclose ( pre );
    fclose ( post );
#endif
	
	//printf("init_scopes...\n");
    init_scopes ( 256 );
	//printf("create_symtab...\n");
    create_symtab ();
	//printf("find_symbols...\n");
    find_symbols ( root );
	
	/*printf("valid_scopes after find_symbols\n");
	print_valid_scopes();
	printf("valid_scopes after find_symbols (reverse)\n");
	print_valid_scopes_reverse();
	
	char *cadena = check_symtab("k");
	if(cadena !=NULL)
		printf("check_symtab devolvio %s\n", cadena);
	else
		printf("check_symtab devolvio NULL\n");*/
	
	
	//printf("destroy_symtab...\n");
    destroy_symtab ();
	//printf("destroy_scopes...\n");
    destroy_scopes ();
	//printf("destroy_subtree...\n");
    destroy_subtree ( root );
    exit ( EXIT_SUCCESS );
}
